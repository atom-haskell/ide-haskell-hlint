"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CP = require("child_process");
const Path = require("path");
const highlight_1 = require("./highlight");
var config_1 = require("./config");
exports.config = config_1.config;
function activate(_state) { }
exports.activate = activate;
function deactivate() { }
exports.deactivate = deactivate;
function provideUPI() {
    return {
        name: 'ide-haskell-hlint',
        messageTypes: {
            lint: {
                autoScroll: true,
                uriFilter: true,
            },
        },
        events: {
            onDidSaveBuffer: (buf) => checkFile(buf, true),
        },
    };
}
exports.provideUPI = provideUPI;
async function checkFile(buf, all = false) {
    const bufpath = buf.getPath();
    if (!bufpath)
        return;
    const rootpath = atom.project
        .getDirectories()
        .find((d) => d.contains(bufpath));
    const cwd = rootpath ? rootpath.getPath() : Path.dirname(bufpath);
    const path = all ? cwd : bufpath;
    try {
        const res = await new Promise((resolve, reject) => {
            CP.execFile('hlint', ['--json', '--cross', '--', path], {
                encoding: 'utf-8',
                cwd,
                maxBuffer: Infinity,
            }, (error, result) => {
                if (error && result === undefined)
                    reject(error);
                else {
                    try {
                        resolve(JSON.parse(result));
                    }
                    catch (e) {
                        reject(error);
                    }
                }
            });
        });
        return Promise.all(res.map(async (hr) => ({
            uri: Path.normalize(hr.file),
            position: { row: hr.startLine - 1, column: hr.startColumn - 1 },
            message: {
                html: `<p>${hr.hint}</p><p>Found:<pre>${await highlight_1.highlightCode(hr.from, 'source.haskell')}</pre></p>` +
                    (hr.to
                        ? `<p>Why not:<pre>${await highlight_1.highlightCode(hr.to, 'source.haskell')}</pre></p>`
                        : '') +
                    (hr.note.length ? `<p>Note: ${hr.note.join('<br>')}</p>` : ''),
            },
            severity: 'lint',
            context: hr.severity,
        })));
    }
    catch (e) {
        console.warn(e);
        if (all) {
            try {
                return await checkFile(buf, false);
            }
            catch (e) {
                console.warn(e);
                atom.notifications.addError(e.toString(), {
                    detail: e.message,
                    dismissable: true,
                });
            }
        }
        else {
            atom.notifications.addError(e.toString(), {
                detail: e.message,
                dismissable: true,
            });
        }
        return;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0Esb0NBQW1DO0FBRW5DLDZCQUE0QjtBQUM1QiwyQ0FBMkM7QUFFM0MsbUNBQWlDO0FBQXhCLDBCQUFBLE1BQU0sQ0FBQTtBQUVmLFNBQWdCLFFBQVEsQ0FBQyxNQUFhLElBQUcsQ0FBQztBQUExQyw0QkFBMEM7QUFFMUMsU0FBZ0IsVUFBVSxLQUFJLENBQUM7QUFBL0IsZ0NBQStCO0FBRS9CLFNBQWdCLFVBQVU7SUFDeEIsT0FBTztRQUNMLElBQUksRUFBRSxtQkFBbUI7UUFDekIsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFO2dCQUNKLFVBQVUsRUFBRSxJQUFJO2dCQUNoQixTQUFTLEVBQUUsSUFBSTthQUNoQjtTQUNGO1FBQ0QsTUFBTSxFQUFFO1lBQ04sZUFBZSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBUTtTQUN0RDtLQUNGLENBQUE7QUFDSCxDQUFDO0FBYkQsZ0NBYUM7QUFtQkQsS0FBSyxVQUFVLFNBQVMsQ0FDdEIsR0FBb0IsRUFDcEIsR0FBRyxHQUFHLEtBQUs7SUFFWCxNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDN0IsSUFBSSxDQUFDLE9BQU87UUFBRSxPQUFNO0lBQ3BCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPO1NBQzFCLGNBQWMsRUFBRTtTQUNoQixJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtJQUNuQyxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNqRSxN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b3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBVUEkgZnJvbSAnYXRvbS1oYXNrZWxsLXVwaSdcbmltcG9ydCAqIGFzIENQIGZyb20gJ2NoaWxkX3Byb2Nlc3MnXG5pbXBvcnQgKiBhcyBBdG9tIGZyb20gJ2F0b20nXG5pbXBvcnQgKiBhcyBQYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgeyBoaWdobGlnaHRDb2RlIH0gZnJvbSAnLi9oaWdobGlnaHQnXG5cbmV4cG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJ1xuXG5leHBvcnQgZnVuY3Rpb24gYWN0aXZhdGUoX3N0YXRlOiBuZXZlcikge31cblxuZXhwb3J0IGZ1bmN0aW9uIGRlYWN0aXZhdGUoKSB7fVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZVVQSSgpOiBVUEkuSVJlZ2lzdHJhdGlvbk9wdGlvbnMge1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdpZGUtaGFza2VsbC1obGludCcsXG4gICAgbWVzc2FnZVR5cGVzOiB7XG4gICAgICBsaW50OiB7XG4gICAgICAgIGF1dG9TY3JvbGw6IHRydWUsXG4gICAgICAgIHVyaUZpbHRlcjogdHJ1ZSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBldmVudHM6IHtcbiAgICAgIG9uRGlkU2F2ZUJ1ZmZlcjogKGJ1ZikgPT4gY2hlY2tGaWxlKGJ1ZiwgdHJ1ZSkgYXMgYW55LFxuICAgIH0sXG4gIH1cbn1cblxudHlwZSBITGludFJlc3VsdCA9IFJlYWRvbmx5QXJyYXk8SExpbnRSZXN1bHRJdGVtPlxuXG5pbnRlcmZhY2UgSExpbnRSZXN1bHRJdGVtIHtcbiAgbW9kdWxlOiBzdHJpbmdbXVxuICBkZWNsOiBzdHJpbmdbXVxuICBzZXZlcml0eTogc3RyaW5nXG4gIGhpbnQ6IHN0cmluZ1xuICBmaWxlOiBzdHJpbmdcbiAgc3RhcnRMaW5lOiBudW1iZXJcbiAgc3RhcnRDb2x1bW46IG51bWJlclxuICBlbmRMaW5lOiBudW1iZXJcbiAgZW5kQ29sdW1uOiBudW1iZXJcbiAgZnJvbTogc3RyaW5nXG4gIHRvPzogc3RyaW5nXG4gIG5vdGU6IHN0cmluZ1tdXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNoZWNrRmlsZShcbiAgYnVmOiBBdG9tLlRleHRCdWZmZXIsXG4gIGFsbCA9IGZhbHNlLFxuKTogUHJvbWlzZTx1bmRlZmluZWQgfCBVUEkuSVJlc3VsdEl0ZW1bXT4ge1xuICBjb25zdCBidWZwYXRoID0gYnVmLmdldFBhdGgoKVxuICBpZiAoIWJ1ZnBhdGgpIHJldHVyblxuICBjb25zdCByb290cGF0aCA9IGF0b20ucHJvamVjdFxuICAgIC5nZXREaXJlY3RvcmllcygpXG4gICAgLmZpbmQoKGQpID0+IGQuY29udGFpbnMoYnVmcGF0aCkpXG4gIGNvbnN0IGN3ZCA9IHJvb3RwYXRoID8gcm9vdHBhdGguZ2V0UGF0aCgpIDogUGF0aC5kaXJuYW1lKGJ1ZnBhdGgpXG4gIGNvbnN0IHBhdGggPSBhbGwgPyBjd2QgOiBidWZwYXRoXG4gIHRyeSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgbmV3IFByb21pc2U8SExpbnRSZXN1bHQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIENQLmV4ZWNGaWxlKFxuICAgICAgICAnaGxpbnQnLFxuICAgICAgICBbJy0tanNvbicsICctLWNyb3NzJywgJy0tJywgcGF0aF0sXG4gICAgICAgIHtcbiAgICAgICAgICBlbmNvZGluZzogJ3V0Zi04JyxcbiAgICAgICAgICBjd2QsXG4gICAgICAgICAgbWF4QnVmZmVyOiBJbmZpbml0eSxcbiAgICAgICAgfSxcbiAgICAgICAgKGVycm9yLCByZXN1bHQpID0+IHtcbiAgICAgICAgICBpZiAoZXJyb3IgJiYgcmVzdWx0ID09PSB1bmRlZmluZWQpIHJlamVjdChlcnJvcilcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHJlc29sdmUoSlNPTi5wYXJzZShyZXN1bHQgYXMgc3RyaW5nKSlcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIClcbiAgICB9KVxuICAgIHJldHVybiBQcm9taXNlLmFsbChcbiAgICAgIHJlcy5tYXAoYXN5bmMgKGhyKSA9PiAoe1xuICAgICAgICB1cmk6IFBhdGgubm9ybWFsaXplKGhyLmZpbGUpLFxuICAgICAgICBwb3NpdGlvbjogeyByb3c6IGhyLnN0YXJ0TGluZSAtIDEsIGNvbHVtbjogaHIuc3RhcnRDb2x1bW4gLSAxIH0sXG4gICAgICAgIG1lc3NhZ2U6IHtcbiAgICAgICAgICBodG1sOlxuICAgICAgICAgICAgYDxwPiR7aHIuaGludH08L3A+PHA+Rm91bmQ6PHByZT4ke2F3YWl0IGhpZ2hsaWdodENvZGUoXG4gICAgICAgICAgICAgIGhyLmZyb20sXG4gICAgICAgICAgICAgICdzb3VyY2UuaGFza2VsbCcsXG4gICAgICAgICAgICApfTwvcHJlPjwvcD5gICtcbiAgICAgICAgICAgIChoci50b1xuICAgICAgICAgICAgICA/IGA8cD5XaHkgbm90OjxwcmU+JHthd2FpdCBoaWdobGlnaHRDb2RlKFxuICAgICAgICAgICAgICAgICAgaHIudG8sXG4gICAgICAgICAgICAgICAgICAnc291cmNlLmhhc2tlbGwnLFxuICAgICAgICAgICAgICAgICl9PC9wcmU+PC9wPmBcbiAgICAgICAgICAgICAgOiAnJykgK1xuICAgICAgICAgICAgKGhyLm5vdGUubGVuZ3RoID8gYDxwPk5vdGU6ICR7aHIubm90ZS5qb2luKCc8YnI+Jyl9PC9wPmAgOiAnJyksXG4gICAgICAgIH0sXG4gICAgICAgIHNldmVyaXR5OiAnbGludCcsXG4gICAgICAgIGNvbnRleHQ6IGhyLnNldmVyaXR5LFxuICAgICAgfSkpLFxuICAgIClcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUud2FybihlKVxuICAgIGlmIChhbGwpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBjaGVja0ZpbGUoYnVmLCBmYWxzZSlcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGUpXG4gICAgICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRFcnJvcihlLnRvU3RyaW5nKCksIHtcbiAgICAgICAgICBkZXRhaWw6IGUubWVzc2FnZSxcbiAgICAgICAgICBkaXNtaXNzYWJsZTogdHJ1ZSxcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZEVycm9yKGUudG9TdHJpbmcoKSwge1xuICAgICAgICBkZXRhaWw6IGUubWVzc2FnZSxcbiAgICAgICAgZGlzbWlzc2FibGU6IHRydWUsXG4gICAgICB9KVxuICAgIH1cbiAgICByZXR1cm5cbiAgfVxufVxuIl19