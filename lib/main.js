"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CP = require("child_process");
const Path = require("path");
var config_1 = require("./config");
exports.config = config_1.config;
function activate(_state) { }
exports.activate = activate;
function deactivate() { }
exports.deactivate = deactivate;
function provideUPI() {
    return {
        name: 'ide-haskell-hlint',
        messageTypes: {
            lint: {
                autoScroll: true,
                uriFilter: true,
            },
        },
        events: {
            onDidSaveBuffer: (buf) => checkFile(buf, true),
        },
    };
}
exports.provideUPI = provideUPI;
async function checkFile(buf, all = false) {
    const bufpath = buf.getPath();
    if (!bufpath)
        return;
    const rootpath = atom.project
        .getDirectories()
        .find((d) => d.contains(bufpath));
    const cwd = rootpath ? rootpath.getPath() : Path.dirname(bufpath);
    const path = all ? cwd : bufpath;
    try {
        const res = await new Promise((resolve, reject) => {
            CP.execFile('hlint', ['--json', '--cross', '--', path], {
                encoding: 'utf-8',
                cwd,
                maxBuffer: Infinity,
            }, (error, result) => {
                if (error && result === undefined)
                    reject(error);
                else
                    resolve(JSON.parse(result));
            });
        });
        console.log(res);
        return res.map((hr) => ({
            uri: Path.normalize(hr.file),
            position: { row: hr.startLine - 1, column: hr.startColumn - 1 },
            message: {
                html: `<p>${hr.hint}</p><p>Found: ${hr.from}</p>` +
                    (hr.to ? `<p>Why not: ${hr.to}</p>` : ''),
            },
            severity: 'lint',
            context: hr.note.join(' '),
        }));
    }
    catch (e) {
        atom.notifications.addError(e.toString(), {
            detail: e.message,
            dismissable: true,
        });
        return;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0Esb0NBQW1DO0FBRW5DLDZCQUE0QjtBQUU1QixtQ0FBaUM7QUFBeEIsMEJBQUEsTUFBTSxDQUFBO0FBRWYsU0FBZ0IsUUFBUSxDQUFDLE1BQWEsSUFBRyxDQUFDO0FBQTFDLDRCQUEwQztBQUUxQyxTQUFnQixVQUFVLEtBQUksQ0FBQztBQUEvQixnQ0FBK0I7QUFFL0IsU0FBZ0IsVUFBVTtJQUN4QixPQUFPO1FBQ0wsSUFBSSxFQUFFLG1CQUFtQjtRQUN6QixZQUFZLEVBQUU7WUFDWixJQUFJLEVBQUU7Z0JBQ0osVUFBVSxFQUFFLElBQUk7Z0JBQ2hCLFNBQVMsRUFBRSxJQUFJO2FBQ2hCO1NBQ0Y7UUFDRCxNQUFNLEVBQUU7WUFDTixlQUFlLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFRO1NBQ3REO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFiRCxnQ0FhQztBQW1CRCxLQUFLLFVBQVUsU0FBUyxDQUN0QixHQUFvQixFQUNwQixHQUFHLEdBQUcsS0FBSztJQUVYLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUM3QixJQUFJLENBQUMsT0FBTztRQUFFLE9BQU07SUFDcEIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU87U0FDMUIsY0FBYyxFQUFFO1NBQ2hCLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO0lBQ25DLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ2pFLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUE7SUFDaEMsSUFBSTtRQUNGLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxPQUFPLENBQWMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDN0QsRUFBRSxDQUFDLFFBQVEsQ0FDVCxPQUFPLEVBQ1AsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsRUFDakM7Z0JBQ0UsUUFBUSxFQUFFLE9BQU87Z0JBQ2pCLEdBQUc7Z0JBQ0gsU0FBUyxFQUFFLFFBQVE7YUFDcEIsRUFDRCxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRTtnQkFDaEIsSUFBSSxLQUFLLElBQUksTUFBTSxLQUFLLFNBQVM7b0JBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBOztvQkFDM0MsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBZ0IsQ0FBQyxDQUFDLENBQUE7WUFDNUMsQ0FBQyxDQUNGLENBQUE7UUFDSCxDQUFDLENBQUMsQ0FBQTtRQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDaEIsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3RCLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7WUFDNUIsUUFBUSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsV0FBVyxHQUFHLENBQUMsRUFBRTtZQUMvRCxPQUFPLEVBQUU7Z0JBQ1AsSUFBSSxFQUNGLE1BQU0sRUFBRSxDQUFDLElBQUksaUJBQWlCLEVBQUUsQ0FBQyxJQUFJLE1BQU07b0JBQzNDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQzthQUM1QztZQUNELFFBQVEsRUFBRSxNQUFNO1lBQ2hCLE9BQU8sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7U0FDM0IsQ0FBQyxDQUFDLENBQUE7S0FDSjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ3hDLE1BQU0sRUFBRSxDQUFDLENBQUMsT0FBTztZQUNqQixXQUFXLEVBQUUsSUFBSTtTQUNsQixDQUFDLENBQUE7UUFDRixPQUFNO0tBQ1A7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgVVBJIGZyb20gJ2F0b20taGFza2VsbC11cGknXG5pbXBvcnQgKiBhcyBDUCBmcm9tICdjaGlsZF9wcm9jZXNzJ1xuaW1wb3J0ICogYXMgQXRvbSBmcm9tICdhdG9tJ1xuaW1wb3J0ICogYXMgUGF0aCBmcm9tICdwYXRoJ1xuXG5leHBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZydcblxuZXhwb3J0IGZ1bmN0aW9uIGFjdGl2YXRlKF9zdGF0ZTogbmV2ZXIpIHt9XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWFjdGl2YXRlKCkge31cblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVVUEkoKTogVVBJLklSZWdpc3RyYXRpb25PcHRpb25zIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnaWRlLWhhc2tlbGwtaGxpbnQnLFxuICAgIG1lc3NhZ2VUeXBlczoge1xuICAgICAgbGludDoge1xuICAgICAgICBhdXRvU2Nyb2xsOiB0cnVlLFxuICAgICAgICB1cmlGaWx0ZXI6IHRydWUsXG4gICAgICB9LFxuICAgIH0sXG4gICAgZXZlbnRzOiB7XG4gICAgICBvbkRpZFNhdmVCdWZmZXI6IChidWYpID0+IGNoZWNrRmlsZShidWYsIHRydWUpIGFzIGFueSxcbiAgICB9LFxuICB9XG59XG5cbnR5cGUgSExpbnRSZXN1bHQgPSBSZWFkb25seUFycmF5PEhMaW50UmVzdWx0SXRlbT5cblxuaW50ZXJmYWNlIEhMaW50UmVzdWx0SXRlbSB7XG4gIG1vZHVsZTogc3RyaW5nW11cbiAgZGVjbDogc3RyaW5nW11cbiAgc2V2ZXJpdHk6ICdTdWdnZXN0aW9uJ1xuICBoaW50OiBzdHJpbmdcbiAgZmlsZTogc3RyaW5nXG4gIHN0YXJ0TGluZTogbnVtYmVyXG4gIHN0YXJ0Q29sdW1uOiBudW1iZXJcbiAgZW5kTGluZTogbnVtYmVyXG4gIGVuZENvbHVtbjogbnVtYmVyXG4gIGZyb206IHN0cmluZ1xuICB0bz86IHN0cmluZ1xuICBub3RlOiBzdHJpbmdbXVxufVxuXG5hc3luYyBmdW5jdGlvbiBjaGVja0ZpbGUoXG4gIGJ1ZjogQXRvbS5UZXh0QnVmZmVyLFxuICBhbGwgPSBmYWxzZSxcbik6IFByb21pc2U8dW5kZWZpbmVkIHwgVVBJLklSZXN1bHRJdGVtW10+IHtcbiAgY29uc3QgYnVmcGF0aCA9IGJ1Zi5nZXRQYXRoKClcbiAgaWYgKCFidWZwYXRoKSByZXR1cm5cbiAgY29uc3Qgcm9vdHBhdGggPSBhdG9tLnByb2plY3RcbiAgICAuZ2V0RGlyZWN0b3JpZXMoKVxuICAgIC5maW5kKChkKSA9PiBkLmNvbnRhaW5zKGJ1ZnBhdGgpKVxuICBjb25zdCBjd2QgPSByb290cGF0aCA/IHJvb3RwYXRoLmdldFBhdGgoKSA6IFBhdGguZGlybmFtZShidWZwYXRoKVxuICBjb25zdCBwYXRoID0gYWxsID8gY3dkIDogYnVmcGF0aFxuICB0cnkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IG5ldyBQcm9taXNlPEhMaW50UmVzdWx0PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBDUC5leGVjRmlsZShcbiAgICAgICAgJ2hsaW50JyxcbiAgICAgICAgWyctLWpzb24nLCAnLS1jcm9zcycsICctLScsIHBhdGhdLFxuICAgICAgICB7XG4gICAgICAgICAgZW5jb2Rpbmc6ICd1dGYtOCcsXG4gICAgICAgICAgY3dkLFxuICAgICAgICAgIG1heEJ1ZmZlcjogSW5maW5pdHksXG4gICAgICAgIH0sXG4gICAgICAgIChlcnJvciwgcmVzdWx0KSA9PiB7XG4gICAgICAgICAgaWYgKGVycm9yICYmIHJlc3VsdCA9PT0gdW5kZWZpbmVkKSByZWplY3QoZXJyb3IpXG4gICAgICAgICAgZWxzZSByZXNvbHZlKEpTT04ucGFyc2UocmVzdWx0IGFzIHN0cmluZykpXG4gICAgICAgIH0sXG4gICAgICApXG4gICAgfSlcbiAgICBjb25zb2xlLmxvZyhyZXMpXG4gICAgcmV0dXJuIHJlcy5tYXAoKGhyKSA9PiAoe1xuICAgICAgdXJpOiBQYXRoLm5vcm1hbGl6ZShoci5maWxlKSxcbiAgICAgIHBvc2l0aW9uOiB7IHJvdzogaHIuc3RhcnRMaW5lIC0gMSwgY29sdW1uOiBoci5zdGFydENvbHVtbiAtIDEgfSxcbiAgICAgIG1lc3NhZ2U6IHtcbiAgICAgICAgaHRtbDpcbiAgICAgICAgICBgPHA+JHtoci5oaW50fTwvcD48cD5Gb3VuZDogJHtoci5mcm9tfTwvcD5gICtcbiAgICAgICAgICAoaHIudG8gPyBgPHA+V2h5IG5vdDogJHtoci50b308L3A+YCA6ICcnKSxcbiAgICAgIH0sXG4gICAgICBzZXZlcml0eTogJ2xpbnQnLFxuICAgICAgY29udGV4dDogaHIubm90ZS5qb2luKCcgJyksXG4gICAgfSkpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkRXJyb3IoZS50b1N0cmluZygpLCB7XG4gICAgICBkZXRhaWw6IGUubWVzc2FnZSxcbiAgICAgIGRpc21pc3NhYmxlOiB0cnVlLFxuICAgIH0pXG4gICAgcmV0dXJuXG4gIH1cbn1cbiJdfQ==