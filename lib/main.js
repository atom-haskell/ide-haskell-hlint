"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CP = require("child_process");
const Path = require("path");
const highlight_1 = require("./highlight");
var config_1 = require("./config");
exports.config = config_1.config;
function activate(_state) { }
exports.activate = activate;
function deactivate() { }
exports.deactivate = deactivate;
function provideUPI() {
    return {
        name: 'ide-haskell-hlint',
        messageTypes: {
            lint: {
                autoScroll: true,
                uriFilter: true,
            },
        },
        events: {
            onDidSaveBuffer: (buf) => checkFile(buf, true),
        },
    };
}
exports.provideUPI = provideUPI;
async function checkFile(buf, all = false) {
    const bufpath = buf.getPath();
    if (!bufpath)
        return;
    const rootpath = atom.project
        .getDirectories()
        .find((d) => d.contains(bufpath));
    const cwd = rootpath ? rootpath.getPath() : Path.dirname(bufpath);
    const path = all ? cwd : bufpath;
    try {
        const res = await new Promise((resolve, reject) => {
            CP.execFile('hlint', ['--json', '--cross', '--', path], {
                encoding: 'utf-8',
                cwd,
                maxBuffer: Infinity,
            }, (error, result) => {
                if (error && result === undefined)
                    reject(error);
                else
                    resolve(JSON.parse(result));
            });
        });
        console.log(res);
        return Promise.all(res.map(async (hr) => ({
            uri: Path.normalize(hr.file),
            position: { row: hr.startLine - 1, column: hr.startColumn - 1 },
            message: {
                html: `<p>${hr.hint}</p><p>Found:<pre>${await highlight_1.highlightCode(hr.from, 'source.haskell')}</pre></p>` +
                    (hr.to
                        ? `<p>Why not:<pre>${await highlight_1.highlightCode(hr.to, 'source.haskell')}</pre></p>`
                        : '') +
                    (hr.note.length ? `<p>Note: ${hr.note.join('<br>')}</p>` : ''),
            },
            severity: 'lint',
            context: hr.severity,
        })));
    }
    catch (e) {
        atom.notifications.addError(e.toString(), {
            detail: e.message,
            dismissable: true,
        });
        return;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0Esb0NBQW1DO0FBRW5DLDZCQUE0QjtBQUM1QiwyQ0FBMkM7QUFFM0MsbUNBQWlDO0FBQXhCLDBCQUFBLE1BQU0sQ0FBQTtBQUVmLFNBQWdCLFFBQVEsQ0FBQyxNQUFhLElBQUcsQ0FBQztBQUExQyw0QkFBMEM7QUFFMUMsU0FBZ0IsVUFBVSxLQUFJLENBQUM7QUFBL0IsZ0NBQStCO0FBRS9CLFNBQWdCLFVBQVU7SUFDeEIsT0FBTztRQUNMLElBQUksRUFBRSxtQkFBbUI7UUFDekIsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFO2dCQUNKLFVBQVUsRUFBRSxJQUFJO2dCQUNoQixTQUFTLEVBQUUsSUFBSTthQUNoQjtTQUNGO1FBQ0QsTUFBTSxFQUFFO1lBQ04sZUFBZSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBUTtTQUN0RDtLQUNGLENBQUE7QUFDSCxDQUFDO0FBYkQsZ0NBYUM7QUFtQkQsS0FBSyxVQUFVLFNBQVMsQ0FDdEIsR0FBb0IsRUFDcEIsR0FBRyxHQUFHLEtBQUs7SUFFWCxNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDN0IsSUFBSSxDQUFDLE9BQU87UUFBRSxPQUFNO0lBQ3BCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPO1NBQzFCLGNBQWMsRUFBRTtTQUNoQixJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtJQUNuQyxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNqRSxNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFBO0lBQ2hDLElBQUk7UUFDRixNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksT0FBTyxDQUFjLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQzdELEVBQUUsQ0FBQyxRQUFRLENBQ1QsT0FBTyxFQUNQLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQ2pDO2dCQUNFLFFBQVEsRUFBRSxPQUFPO2dCQUNqQixHQUFHO2dCQUNILFNBQVMsRUFBRSxRQUFRO2FBQ3BCLEVBQ0QsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUU7Z0JBQ2hCLElBQUksS0FBSyxJQUFJLE1BQU0sS0FBSyxTQUFTO29CQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTs7b0JBQzNDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQWdCLENBQUMsQ0FBQyxDQUFBO1lBQzVDLENBQUMsQ0FDRixDQUFBO1FBQ0gsQ0FBQyxDQUFDLENBQUE7UUFDRixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ2hCLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FDaEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3JCLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7WUFDNUIsUUFBUSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsV0FBVyxHQUFHLENBQUMsRUFBRTtZQUMvRCxPQUFPLEVBQUU7Z0JBQ1AsSUFBSSxFQUNGLE1BQU0sRUFBRSxDQUFDLElBQUkscUJBQXFCLE1BQU0seUJBQWEsQ0FDbkQsRUFBRSxDQUFDLElBQUksRUFDUCxnQkFBZ0IsQ0FDakIsWUFBWTtvQkFDYixDQUFDLEVBQUUsQ0FBQyxFQUFFO3dCQUNKLENBQUMsQ0FBQyxtQkFBbUIsTUFBTSx5QkFBYSxDQUNwQyxFQUFFLENBQUMsRUFBRSxFQUNMLGdCQUFnQixDQUNqQixZQUFZO3dCQUNmLENBQUMsQ0FBQyxFQUFFLENBQUM7b0JBQ1AsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7YUFDakU7WUFDRCxRQUFRLEVBQUUsTUFBTTtZQUNoQixPQUFPLEVBQUUsRUFBRSxDQUFDLFFBQVE7U0FDckIsQ0FBQyxDQUFDLENBQ0osQ0FBQTtLQUNGO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDeEMsTUFBTSxFQUFFLENBQUMsQ0FBQyxPQUFPO1lBQ2pCLFdBQVcsRUFBRSxJQUFJO1NBQ2xCLENBQUMsQ0FBQTtRQUNGLE9BQU07S0FDUDtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBVUEkgZnJvbSAnYXRvbS1oYXNrZWxsLXVwaSdcbmltcG9ydCAqIGFzIENQIGZyb20gJ2NoaWxkX3Byb2Nlc3MnXG5pbXBvcnQgKiBhcyBBdG9tIGZyb20gJ2F0b20nXG5pbXBvcnQgKiBhcyBQYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgeyBoaWdobGlnaHRDb2RlIH0gZnJvbSAnLi9oaWdobGlnaHQnXG5cbmV4cG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJ1xuXG5leHBvcnQgZnVuY3Rpb24gYWN0aXZhdGUoX3N0YXRlOiBuZXZlcikge31cblxuZXhwb3J0IGZ1bmN0aW9uIGRlYWN0aXZhdGUoKSB7fVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZVVQSSgpOiBVUEkuSVJlZ2lzdHJhdGlvbk9wdGlvbnMge1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdpZGUtaGFza2VsbC1obGludCcsXG4gICAgbWVzc2FnZVR5cGVzOiB7XG4gICAgICBsaW50OiB7XG4gICAgICAgIGF1dG9TY3JvbGw6IHRydWUsXG4gICAgICAgIHVyaUZpbHRlcjogdHJ1ZSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBldmVudHM6IHtcbiAgICAgIG9uRGlkU2F2ZUJ1ZmZlcjogKGJ1ZikgPT4gY2hlY2tGaWxlKGJ1ZiwgdHJ1ZSkgYXMgYW55LFxuICAgIH0sXG4gIH1cbn1cblxudHlwZSBITGludFJlc3VsdCA9IFJlYWRvbmx5QXJyYXk8SExpbnRSZXN1bHRJdGVtPlxuXG5pbnRlcmZhY2UgSExpbnRSZXN1bHRJdGVtIHtcbiAgbW9kdWxlOiBzdHJpbmdbXVxuICBkZWNsOiBzdHJpbmdbXVxuICBzZXZlcml0eTogc3RyaW5nXG4gIGhpbnQ6IHN0cmluZ1xuICBmaWxlOiBzdHJpbmdcbiAgc3RhcnRMaW5lOiBudW1iZXJcbiAgc3RhcnRDb2x1bW46IG51bWJlclxuICBlbmRMaW5lOiBudW1iZXJcbiAgZW5kQ29sdW1uOiBudW1iZXJcbiAgZnJvbTogc3RyaW5nXG4gIHRvPzogc3RyaW5nXG4gIG5vdGU6IHN0cmluZ1tdXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNoZWNrRmlsZShcbiAgYnVmOiBBdG9tLlRleHRCdWZmZXIsXG4gIGFsbCA9IGZhbHNlLFxuKTogUHJvbWlzZTx1bmRlZmluZWQgfCBVUEkuSVJlc3VsdEl0ZW1bXT4ge1xuICBjb25zdCBidWZwYXRoID0gYnVmLmdldFBhdGgoKVxuICBpZiAoIWJ1ZnBhdGgpIHJldHVyblxuICBjb25zdCByb290cGF0aCA9IGF0b20ucHJvamVjdFxuICAgIC5nZXREaXJlY3RvcmllcygpXG4gICAgLmZpbmQoKGQpID0+IGQuY29udGFpbnMoYnVmcGF0aCkpXG4gIGNvbnN0IGN3ZCA9IHJvb3RwYXRoID8gcm9vdHBhdGguZ2V0UGF0aCgpIDogUGF0aC5kaXJuYW1lKGJ1ZnBhdGgpXG4gIGNvbnN0IHBhdGggPSBhbGwgPyBjd2QgOiBidWZwYXRoXG4gIHRyeSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgbmV3IFByb21pc2U8SExpbnRSZXN1bHQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIENQLmV4ZWNGaWxlKFxuICAgICAgICAnaGxpbnQnLFxuICAgICAgICBbJy0tanNvbicsICctLWNyb3NzJywgJy0tJywgcGF0aF0sXG4gICAgICAgIHtcbiAgICAgICAgICBlbmNvZGluZzogJ3V0Zi04JyxcbiAgICAgICAgICBjd2QsXG4gICAgICAgICAgbWF4QnVmZmVyOiBJbmZpbml0eSxcbiAgICAgICAgfSxcbiAgICAgICAgKGVycm9yLCByZXN1bHQpID0+IHtcbiAgICAgICAgICBpZiAoZXJyb3IgJiYgcmVzdWx0ID09PSB1bmRlZmluZWQpIHJlamVjdChlcnJvcilcbiAgICAgICAgICBlbHNlIHJlc29sdmUoSlNPTi5wYXJzZShyZXN1bHQgYXMgc3RyaW5nKSlcbiAgICAgICAgfSxcbiAgICAgIClcbiAgICB9KVxuICAgIGNvbnNvbGUubG9nKHJlcylcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgICByZXMubWFwKGFzeW5jIChocikgPT4gKHtcbiAgICAgICAgdXJpOiBQYXRoLm5vcm1hbGl6ZShoci5maWxlKSxcbiAgICAgICAgcG9zaXRpb246IHsgcm93OiBoci5zdGFydExpbmUgLSAxLCBjb2x1bW46IGhyLnN0YXJ0Q29sdW1uIC0gMSB9LFxuICAgICAgICBtZXNzYWdlOiB7XG4gICAgICAgICAgaHRtbDpcbiAgICAgICAgICAgIGA8cD4ke2hyLmhpbnR9PC9wPjxwPkZvdW5kOjxwcmU+JHthd2FpdCBoaWdobGlnaHRDb2RlKFxuICAgICAgICAgICAgICBoci5mcm9tLFxuICAgICAgICAgICAgICAnc291cmNlLmhhc2tlbGwnLFxuICAgICAgICAgICAgKX08L3ByZT48L3A+YCArXG4gICAgICAgICAgICAoaHIudG9cbiAgICAgICAgICAgICAgPyBgPHA+V2h5IG5vdDo8cHJlPiR7YXdhaXQgaGlnaGxpZ2h0Q29kZShcbiAgICAgICAgICAgICAgICAgIGhyLnRvLFxuICAgICAgICAgICAgICAgICAgJ3NvdXJjZS5oYXNrZWxsJyxcbiAgICAgICAgICAgICAgICApfTwvcHJlPjwvcD5gXG4gICAgICAgICAgICAgIDogJycpICtcbiAgICAgICAgICAgIChoci5ub3RlLmxlbmd0aCA/IGA8cD5Ob3RlOiAke2hyLm5vdGUuam9pbignPGJyPicpfTwvcD5gIDogJycpLFxuICAgICAgICB9LFxuICAgICAgICBzZXZlcml0eTogJ2xpbnQnLFxuICAgICAgICBjb250ZXh0OiBoci5zZXZlcml0eSxcbiAgICAgIH0pKSxcbiAgICApXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkRXJyb3IoZS50b1N0cmluZygpLCB7XG4gICAgICBkZXRhaWw6IGUubWVzc2FnZSxcbiAgICAgIGRpc21pc3NhYmxlOiB0cnVlLFxuICAgIH0pXG4gICAgcmV0dXJuXG4gIH1cbn1cbiJdfQ==