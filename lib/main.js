"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CP = require("child_process");
const Path = require("path");
const highlight_1 = require("./highlight");
var config_1 = require("./config");
exports.config = config_1.config;
function activate(_state) { }
exports.activate = activate;
function deactivate() { }
exports.deactivate = deactivate;
function provideUPI() {
    return {
        name: 'ide-haskell-hlint',
        messageTypes: {
            lint: {
                autoScroll: true,
                uriFilter: true,
            },
        },
        events: {
            onDidSaveBuffer: (buf) => checkFile(buf, atom.config.get('ide-haskell-hlint').checkAllFilesInProject
                ? 'dir'
                : 'file'),
            onDidStopChanging: (buf) => {
                if (atom.config.get('ide-haskell-hlint').checkOnChange)
                    return checkFile(buf, 'stdin');
            },
        },
    };
}
exports.provideUPI = provideUPI;
async function checkFile(buf, mode) {
    const bufpath = buf.getPath();
    if (!bufpath)
        return;
    const rootpath = atom.project
        .getDirectories()
        .find((d) => d.contains(bufpath));
    const cwd = rootpath ? rootpath.getPath() : Path.dirname(bufpath);
    let path;
    if (mode === 'dir')
        path = cwd;
    else if (mode === 'file')
        path = bufpath;
    else if (mode === 'stdin')
        path = '-';
    else
        throw new Error(`Unknown mode ${mode}`);
    try {
        const res = await new Promise((resolve, reject) => {
            const cp = CP.execFile('hlint', ['--json', '--cross', '--no-exit-code', '--', path], {
                encoding: 'utf-8',
                cwd,
                maxBuffer: Infinity,
            }, (error, result) => {
                if (error)
                    reject(error);
                else {
                    try {
                        resolve(JSON.parse(result));
                    }
                    catch (e) {
                        reject(e);
                    }
                }
            });
            if (mode === 'stdin') {
                cp.stdin.write(buf.getText());
                cp.stdin.end();
            }
        });
        return Promise.all(res.map(async (hr) => ({
            uri: Path.normalize(hr.file === '-' ? bufpath : hr.file),
            position: { row: hr.startLine - 1, column: hr.startColumn - 1 },
            message: {
                html: `<p>${hr.hint}</p><p>Found:<pre>${await highlight_1.highlightCode(hr.from, 'source.haskell')}</pre></p>` +
                    (hr.to
                        ? `<p>Why not:<pre>${await highlight_1.highlightCode(hr.to, 'source.haskell')}</pre></p>`
                        : '') +
                    (hr.note.length ? `<p>Note: ${hr.note.join('<br>')}</p>` : ''),
            },
            severity: 'lint',
            context: hr.severity,
        })));
    }
    catch (e) {
        console.warn(e);
        if (mode === 'dir') {
            try {
                return await checkFile(buf, 'file');
            }
            catch (e) {
                console.warn(e);
                atom.notifications.addError(e.toString(), {
                    detail: e.message,
                    dismissable: true,
                });
            }
        }
        else {
            atom.notifications.addError(e.toString(), {
                detail: e.message,
                dismissable: true,
            });
        }
        return;
    }
}
//# sourceMappingURL=data:application/json;base64,